/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/pwm/pwm.h>

/ {
	model = "BeagleCloneMax, USB TTA";
	compatible = "ti,am335x-beagleclonemax", "ti,am33xx";

	cpus {
	cpu@0 {
			cpu0-supply = <&dcdc2_reg>;
		};
	};

	memory {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};

        gpio_inputs {
                compatible = "gpio-keys";
                #address-cells = <1>;
                #size-cells = <0>;

                gpio_input@1 {
                        label="button_rhs";
                        linux,code = <0x100>;
                        gpios = <&gpio2 1 GPIO_ACTIVE_LOW>;
                };
        };

	leds
	{
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&gpio_pins>;
		//rhs RGB LED
		led@1 {
			label="rhs_green";
			gpios = <&gpio1 3 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "none";
		};
		led@2 {
			label="rhs_red";
			gpios = <&gpio2 25 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "mtd";
		};
		led@3 {
			label="rhs_blue";
			gpios = <&gpio1 31 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "none";
		};

		//middle RGB LED
		led@4 {
			label="mid_red";
			gpios = <&gpio1 1 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "cpu";
		};
		led@5 {
			label="mid_green";
			gpios = <&gpio1 0 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "none";
		};

		led@6 {
			label="mid_blue";
			gpios = <&gpio1 30 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "none";

		};

		//lhs RGB LED
		led@7 {
			label="lhs_red";
			gpios = <&gpio2 3 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "default-on";
		};
		led@8 {
			label="lhs_green";
			gpios = <&gpio2 2 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "none";
		};
		led@9 {
			label="lhs_blue";
			gpios = <&gpio2 4 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "default-on";
		};
	};

        panel {
                compatible = "ti,tilcdc,panel";
                status = "okay";
                pinctrl-names = "default";
                pinctrl-0 = <&lcdif_pins>;

                panel-info {
                        ac-bias         = <255>;
                        ac-bias-intrpt  = <0>;
                        dma-burst-sz    = <16>;
                        bpp             = <32>;
                        fdd             = <0x80>;
                        sync-edge       = <0>;
                        sync-ctrl       = <1>;
                        raster-order    = <0>;
                        fifo-th         = <0>;
                };
                display-timings {
                        480x272 {
                                hactive         = <480>;
                                vactive         = <272>;
                                hback-porch     = <43>;
                                hfront-porch    = <8>;
                                hsync-len       = <4>;
                                vback-porch     = <12>;
                                vfront-porch    = <4>;
                                vsync-len       = <10>;
                                clock-frequency = <9000000>;
                                hsync-active    = <0>;
                                vsync-active    = <0>;
                        };
                };
	};
}; //board

&am33xx_pinmux {
	pinctrl-names = "default";

	gpio_pins: pinmux_gpio_pins 
	{
		pinctrl-single,pins = <
			//USB power-control outputs
			0x1b0 (PIN_OUTPUT_PULLUP | MUX_MODE7)   /* USB PORT POWER (xdma_event_intr0)  */
			0x1b4 (PIN_OUTPUT_PULLUP | MUX_MODE7)	/* WIFI PORT POWER (xdma_event_intr1) */
			
			//user button on gpio2_1
			0x08C (PIN_INPUT_PULLUP | MUX_MODE7) /* USER button (gpmc_clk) */		

			//zwave reset
			0x07c (PIN_OUTPUT_PULLUP | MUX_MODE7)	/* ZWAVE reset on gpio1_29/gpmc_csn0 */		
		>;
	};

	//main i2c for PMIC
	i2c0_pins: pinmux_i2c0_pins {
		pinctrl-single,pins = <
			0x188 (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
			0x18c (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
		>;
	};

	//expansion i2c: rtc,tpm,eeprom
	i2c2_pins: pinmux_i2c2_pins {
	pinctrl-single,pins = <
		0x178 (PIN_INPUT_PULLUP | MUX_MODE3)    /* i2c2_sda */
		0x17c (PIN_INPUT_PULLUP | MUX_MODE3)    /* i2c2_scl */
                >;
        };

	//console UART
	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)		/* uart0_rxd.uart0_rxd */
			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)		/* uart0_txd.uart0_txd */
		>;
	};

	//ZWAVE UART
	uart4_pins: pinmux_uart4_pins {
		pinctrl-single,pins = <
			0x168 (PIN_INPUT_PULLUP | MUX_MODE1)		/* uart4_rxd, gpio1_8, "uart0_ctsn" = 0x968 -> 0x168 */
			0x16C (PIN_OUTPUT_PULLDOWN | MUX_MODE1)		/* uart4_txd, gpio1_9, "uart0_rtsn" = 0x96C -> 0x16c */
		>;
	};

	//UART1, J18, 'COMM HEADER'
	uart1_pins: pinmux_uart1_pins {
		pinctrl-single,pins = <
			0x180 (PIN_INPUT_PULLUP | MUX_MODE0)		/* uart1_rxd, gpio0_14 */
			0x184 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)		/* uart1_txd, gpio0_15 */
		>;
	};
	
	//main SPI
	spi0_pins: pinmux_spi0_pins {
		pinctrl-single,pins = <
			0x150 (PIN_INPUT_PULLUP | MUX_MODE0)    /* spi0_clk.spi0_clk */
			0x154 (PIN_INPUT_PULLUP | MUX_MODE0)    /* spi0_d0.spi0_d0 */
			0x158 (PIN_INPUT_PULLUP | MUX_MODE0)    /* spi0_d1.spi0_d1 */
			0x15c (PIN_INPUT_PULLUP | MUX_MODE0)    /* spi0_cs0.spi0_cs0 */
            >;
	};

	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x110 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_rxerr.mii1_rxerr */
			0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* mii1_txen.mii1_txen */
			0x118 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_rxdv.mii1_rxdv */
			0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* mii1_txd3.mii1_txd3 */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* mii1_txd2.mii1_txd2 */
			0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* mii1_txd1.mii1_txd1 */
			0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* mii1_txd0.mii1_txd0 */
			0x12c (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_txclk.mii1_txclk */
			0x130 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_rxclk.mii1_rxclk */
			0x134 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_rxd3.mii1_rxd3 */
			0x138 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_rxd2.mii1_rxd2 */
			0x13c (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_rxd1.mii1_rxd1 */
			0x140 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mii1_rxd0.mii1_rxd0 */

			/* Slave 2 */
			0x074 (PIN_INPUT_PULLUP | MUX_MODE1)    /* U17, 0-31, gpmc_wpm (mii2_rxer) */
			0x040 (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* R13, 1-16, gpmc_a0 (mii2_txen) */
			0x044 (PIN_INPUT_PULLUP | MUX_MODE1)    /* V14, 1-17, gpmc_a1 (mii2_rxdv) */
			0x048 (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* U14, 1-18, gpmc_a2 (mii2_txd3) */
			0x04C (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* 	1-19, gpmc_a3 (mii2_txd2) */
			0x050 (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* 	1-20, gpmc_a4 (mii2_txd1) */
			0x054 (PIN_OUTPUT_PULLDOWN | MUX_MODE1) /* 	1-21, gpmc_a5 (mii2_txd0) */
			0x058 (PIN_INPUT_PULLUP | MUX_MODE1)    /* 	1-22, gpmc_a6 (mii2_txclk) */
			0x05C (PIN_INPUT_PULLUP | MUX_MODE1)    /* 	1-23, gpmc_a7 (mii2_rxclk) */
			0x060 (PIN_INPUT_PULLUP | MUX_MODE1)    /* 	1-24, gpmc_a8 (mii2_rxd3) */
			0x064 (PIN_INPUT_PULLUP | MUX_MODE1)    /* 	1-25, gpmc_a9 (mii2_rxd2) */
			0x068 (PIN_INPUT_PULLUP | MUX_MODE1)    /* 	1-26, gpmc_a10 (mii2_rxd1) */
			0x06C (PIN_INPUT_PULLUP | MUX_MODE1)    /* 	1-27, gpmc_a11 (mii2_rxd0) */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 reset value */
			0x110 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)

			0x074 (PIN_INPUT_PULLUP | MUX_MODE7)    /* U17, 0-31, gpmc_wpm (mii2_rxer) */
			0x040 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* R13, 1-16, gpmc_a0 (mii2_txen) */
			0x044 (PIN_INPUT_PULLUP | MUX_MODE7)    /* V14, 1-17, gpmc_a1 (mii2_rxdv) */
			0x048 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* U14, 1-18, gpmc_a2 (mii2_txd3) */
			0x04C (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* 	1-19, gpmc_a3 (mii2_txd2) */
			0x050 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* 	1-20, gpmc_a4 (mii2_txd1) */
			0x054 (PIN_OUTPUT_PULLDOWN | MUX_MODE7) /* 	1-21, gpmc_a5 (mii2_txd0) */
			0x058 (PIN_INPUT_PULLUP | MUX_MODE7)    /* 	1-22, gpmc_a6 (mii2_txclk) */
			0x05C (PIN_INPUT_PULLUP | MUX_MODE7)    /* 	1-23, gpmc_a7 (mii2_rxclk) */
			0x060 (PIN_INPUT_PULLUP | MUX_MODE7)    /* 	1-24, gpmc_a8 (mii2_rxd3) */
			0x064 (PIN_INPUT_PULLUP | MUX_MODE7)    /* 	1-25, gpmc_a9 (mii2_rxd2) */
			0x068 (PIN_INPUT_PULLUP | MUX_MODE7)    /* 	1-26, gpmc_a10 (mii2_rxd1) */
			0x06C (PIN_INPUT_PULLUP | MUX_MODE1)    /* 	1-27, gpmc_a11 (mii2_rxd0) */
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)    /* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)                   /* mdio_clk.mdio_clk */
			>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			>;
	};

	mmc0_pins_default: pinmux_mmc0_pins {
		pinctrl-single,pins = <
		0x0F0 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat3.mmc0_dat3 */
		0x0F4 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat2.mmc0_dat2 */
		0x0F8 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat1.mmc0_dat1 */
		0x0FC (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_dat0.mmc0_dat0 */
		0x100 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_clk.mmc0_clk */
		0x104 (PIN_INPUT_PULLUP | MUX_MODE0)    /* mmc0_cmd.mmc0_cmd */
		0x160 (PIN_INPUT | MUX_MODE7)           /* spi0_cs1.gpio0_6 */
		>;
	};

        lcdif_pins: lcdif_pins {
                pinctrl-single,pins = <
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD8, PIN_OUTPUT, MUX_MODE1)              /* gpmc_ad8.lcd_data23 */
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD9, PIN_OUTPUT, MUX_MODE1)              /* gpmc_ad9.lcd_data22 */
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD10, PIN_OUTPUT, MUX_MODE1)             /* gpmc_ad10.lcd_data21 */
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD11, PIN_OUTPUT, MUX_MODE1)             /* gpmc_ad11.lcd_data20 */
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD12, PIN_OUTPUT, MUX_MODE1)             /* gpmc_ad12.lcd_data19 */
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD13, PIN_OUTPUT, MUX_MODE1)             /* gpmc_ad13.lcd_data18 */
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD14, PIN_OUTPUT, MUX_MODE1)             /* gpmc_ad14.lcd_data17 */
                        AM33XX_PADCONF(AM335X_PIN_GPMC_AD15, PIN_OUTPUT, MUX_MODE1)             /* gpmc_ad15.lcd_data16 */
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA0, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA1, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA2, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA3, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA4, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA5, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA6, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA7, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA8, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA9, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA10, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA11, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA12, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA13, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA14, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_DATA15, PIN_OUTPUT, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_VSYNC, PIN_OUTPUT_PULLDOWN, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_HSYNC, PIN_OUTPUT_PULLDOWN, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_PCLK, PIN_OUTPUT_PULLDOWN, MUX_MODE0)
                        AM33XX_PADCONF(AM335X_PIN_LCD_AC_BIAS_EN, PIN_OUTPUT_PULLDOWN, MUX_MODE0)
                >;
        };

};//pins

&uart0 {
		pinctrl-names = "default";
		pinctrl-0 = <&uart0_pins>;
		status = "okay";
};

&uart1 {
		pinctrl-names = "default";
		pinctrl-0 = <&uart1_pins>;
		status = "okay";
};

&uart4 {
		pinctrl-names = "default";
		pinctrl-0 = <&uart4_pins>;
		status = "okay";
};

&i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;	
	status = "okay";
	clock-frequency = <400000>;
	tps: tps@24 {
		reg = <0x24>;
	};
};

&i2c2 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c2_pins>;	
	status = "okay";
	clock-frequency = <400000>;
	eeprom: eeprom@50 {
	compatible = "at,24c256";
                reg = <0x50>;
	};
	pcf8563: rtc@51 {
		compatible = "nxp,pcf8563";
		reg = <0x51>;
	};
};


#include "tps65217.dtsi"

&rtc {
	system-power-controller;
};

&tps {
	ti,pmic-shutdown-controller;

        backlight {
                isel = <2>; /* ISET2 */
                fdim = <200>; /* TPS65217_BL_FDIM_200HZ */
                default-brightness = <1>;
        };

        regulators {
                dcdc1_reg: regulator@0 {
                        regulator-always-on;
                };

                dcdc2_reg: regulator@1 {
                        /* VDD_MPU voltage limits 0.95V - 1.325V with +/-4% tol*/
                        regulator-name = "vdd_mpu";
                        regulator-min-microvolt = <925000>;
                        regulator-max-microvolt = <1378000>;
                        regulator-boot-on;
                        regulator-always-on;
                };

                dcdc3_reg: regulator@2 {
                        /* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tole*/
                        regulator-name = "vdd_core";
                        regulator-min-microvolt = <925000>;
                        regulator-max-microvolt = <1150000>;
                        regulator-boot-on;
                        regulator-always-on;
                };
                ldo1_reg: regulator@3 {
                        regulator-always-on;
                };

                ldo2_reg: regulator@4 {
                        regulator-always-on;
                };

                ldo3_reg: regulator@5 {
					regulator-always-on;
					regulator-min-microvolt = <1800000>;
					regulator-max-microvolt = <1800000>;
                };

                ldo4_reg: regulator@6 {
					regulator-always-on;
					regulator-min-microvolt = <3300000>;
					regulator-max-microvolt = <3300000>;
                };
        };//regulators
};//tps

&mmc1 {
        bus-width = <4>;
        pinctrl-names = "default";
        pinctrl-0 = <&mmc0_pins_default>;
        cd-gpios = <&gpio0 6 GPIO_ACTIVE_HIGH>;
        cd-inverted;
        vmmc-supply = <&ldo4_reg>;
        status = "okay";
};

&gpio0 {
	ti,no-reset;
};

&cppi41dma  {
	status = "okay";
};

&cpsw_emac0 {
        phy_id = <&davinci_mdio>, <0>;
        phy-mode = "mii";
	dual_emac_res_vlan = <1>;
};

&cpsw_emac1 {
        phy_id = <&davinci_mdio>, <1>;
        phy-mode = "mii";
	dual_emac_res_vlan = <2>;
};

&mac {
        //slaves = <2>;
        pinctrl-names = "default", "sleep";
        pinctrl-0 = <&cpsw_default>;
        pinctrl-1 = <&cpsw_sleep>;
	dual_emac;	
	status = "okay";
};

&davinci_mdio {
        pinctrl-names = "default", "sleep";
        pinctrl-0 = <&davinci_mdio_default>;
        pinctrl-1 = <&davinci_mdio_sleep>;
	status = "okay";
};

&usb {
	status = "okay";
	pinctrl-names = "default";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb1_phy {
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "host";
	mentor,power = <1500>;
};

&usb1 {
	status = "okay";
	dr_mode = "host";
	mentor,power = <1500>;
};

&spi0 {
	pinctrl-names = "default";
	pinctrl-0 = <&spi0_pins>;
	status = "okay";
	m25p80@0 {
		compatible = "jedec,spi-nor";
		spi-max-frequency = <24000000>;
		reg = <0x0>;
		#address-cells = <1>;
		#size-cells = <1>;
		partition@0xA0000 {
			label = "fullchip";
		reg = <0x00000 0x1000000>;
		};
	};
};

&lcdc {
        status = "okay";
        blue-and-red-wiring = "crossed";
};

